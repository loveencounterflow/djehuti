{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n#===========================================================================================================\nrpr                       = ( require 'webguy' ).trm.rpr\n#-----------------------------------------------------------------------------------------------------------\nresolved_promise          = Promise.resolve()\n# s                         = ( name ) -> Symbol.for  name\n# ps                        = ( name ) -> Symbol      name\n#-----------------------------------------------------------------------------------------------------------\n{ isa\n  isa_optional\n  validate\n  validate_optional }     = require './types'\n#-----------------------------------------------------------------------------------------------------------\nget_WeakMap = ->\n  return Map unless globalThis.WeakMap?\n  try ( new WeakMap() ).set Symbol 'whatever', 123 catch error then return Map\n  return globalThis.WeakMap\n\n\n#===========================================================================================================\nclass SYMBOLIC\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: -> throw new Error \"class cannot be instantiated\"\n\n  #---------------------------------------------------------------------------------------------------------\n  @_text_from_key:              ( $key ) -> if isa.symbol $key then $key.description else $key\n  @_listener_name_from_key:     ( $key ) -> 'on_' + @_text_from_key $key\n  @_unique_key_symbol_from_key: ( $key ) -> Symbol @_text_from_key $key\n\n\n#===========================================================================================================\nclass Datom\n  ### all API methods should start with `$` like `$key` and `$value` ###\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( $key, $value = null ) ->\n    throw new Error \"expected 1 or 2 arguments, got #{arguments.length}\" unless isa.unary_or_binary arguments\n    #.......................................................................................................\n    if arguments.length is 1\n      if isa.object $key\n        $value = $key\n        $key   = $value.$key ? null\n    #.......................................................................................................\n    @$key = $key\n    if isa.object $value\n      values = { $value..., }\n      delete values.$key ### special case: ensure we don't overwrite 'explicit' `$key` ###\n      Object.assign @, values\n    else\n      @$value = $value if $value?\n    #.......................................................................................................\n    $freeze = ( validate_optional.$freeze @$freeze ) ? true\n    delete @$freeze\n    Object.freeze @ if $freeze\n    #.......................................................................................................\n    validate.IT_note_$key @$key\n    return undefined\n\n\n#===========================================================================================================\nclass Note extends Datom\n\n#===========================================================================================================\nclass Results extends Datom\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( note, results ) ->\n    throw new Error \"expected 2 arguments, got #{arguments.length}\" unless isa.binary arguments\n    super '$results', { note, results, }\n    return undefined\n\n\n#===========================================================================================================\nclass Intertalk\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @symbols        = { any: ( Symbol 'any' ), unhandled: ( Symbol 'unhandled' ), }\n    @key_symbols    = new Map()\n    @listeners      = new ( get_WeakMap() )()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  on: ( $key, listener ) ->\n    ### TAINT prevent from registering a listener more than once per note $key ###\n    throw new Error \"expected 2 arguments, got #{arguments.length}\" unless isa.binary arguments\n    validate.IT_note_$key $key\n    validate.IT_listener  listener\n    ctl = @_get_ctl $key, listener\n    ( @_listeners_from_key $key ).push [ listener, ctl, ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  unsubscribe: ( $key, listener ) ->\n    switch arity = arguments.length\n      when 1 then [ $key, listener, ] = [ null, $key, ]\n      when 2 then null\n      else throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n    validate_optional.IT_note_$key $key\n    validate.IT_listener listener\n    R = 0\n    for [ registered_key, key_symbol, ] from @key_symbols\n      continue if $key? and ( $key isnt registered_key )\n      registered_listeners_and_ctls = ( @listeners.get key_symbol ) ? []\n      for idx in [ registered_listeners_and_ctls.length - 1 .. 0 ] by -1\n        [ registered_listener, ctl, ] = registered_listeners_and_ctls[ idx ]\n        continue unless registered_listener is listener\n        R++\n        registered_listeners_and_ctls.splice idx, 1\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  on_any:       ( listener ) -> @on @symbols.any,       listener\n  on_unhandled: ( listener ) -> @on @symbols.unhandled, listener\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_ctl : ( $key, listener ) -> R =\n    unsubscribe_this: => @unsubscribe     $key, listener\n    unsubscribe_all:  => @unsubscribe           listener\n\n  #---------------------------------------------------------------------------------------------------------\n  _listeners_from_key: ( $key ) ->\n    ### TAINT is this necessary and does it what it intends to do? ###\n    ### use Symbol, WeakMap to allow for garbage collection when `Intertalk` instance gets out of scope: ###\n    unless ( key_symbol = @key_symbols.get $key )?\n      @key_symbols.set $key, ( key_symbol = SYMBOLIC._unique_key_symbol_from_key $key )\n    unless ( R = @listeners.get key_symbol )?\n      @listeners.set key_symbol, ( R = [] )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  emit: ( P... ) ->\n    note                = new Note P...\n    { $key }            = note\n    key_listeners       = @_listeners_from_key  note.$key\n    any_listeners       = @_listeners_from_key  @symbols.any\n    fallback_listeners  = if key_listeners.length is 0 then @_listeners_from_key @symbols.unhandled else []\n    results             = []\n    await resolved_promise ### as per https://github.com/sindresorhus/emittery/blob/main/index.js#L363 ###\n    results.push ( await Promise.all ( ( -> lstnr note, ctl )() for [ lstnr, ctl, ] from any_listeners      ) )...\n    results.push ( await Promise.all ( ( -> lstnr note, ctl )() for [ lstnr, ctl, ] from fallback_listeners ) )...\n    results.push ( await Promise.all ( ( -> lstnr note, ctl )() for [ lstnr, ctl, ] from key_listeners      ) )...\n    return new Results note, results\n\n  #---------------------------------------------------------------------------------------------------------\n  emit_on_event: ( element, event_name, note_name ) ->\n    switch arity = arguments.length\n      # when 1\n      when 2 then [ element, event_name, note_name, ] = [ document, element , event_name, ]\n      when 3 then null\n      else validate.binary_or_trinary arguments\n    handler = ( event ) => @emit note_name, event\n    return element.addEventListener event_name, handler, false\n\n\n#===========================================================================================================\n_extras         = { Datom, isa, validate, isa_optional, validate_optional, }\nmodule.exports  = { Intertalk, Note, Results, _extras, version: ( require '../package.json' ).version, }\n"
  ]
}