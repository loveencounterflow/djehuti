{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n#===========================================================================================================\nresolved_promise          = Promise.resolve()\n# s                         = ( name ) -> Symbol.for  name\n# ps                        = ( name ) -> Symbol      name\n\n\n#===========================================================================================================\nisa =\n  anything:               ( x ) -> true\n  nothing:                ( x ) -> not x?\n  something:              ( x ) -> x?\n  boolean:                ( x ) -> ( x is true ) or ( x is false )\n  function:               ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:          ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:                 ( x ) -> ( typeof x ) is 'symbol'\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  text:                   ( x ) -> ( typeof x ) is 'string'\n  event_listener:         ( x ) -> ( @function x ) or ( @asyncfunction x )\n  event_key:              ( x ) -> ( @text x ) or ( @symbol x )\n  nullary:                ( x ) -> x? and ( x.length is 0 )\n  unary:                  ( x ) -> x? and ( x.length is 1 )\n  binary:                 ( x ) -> x? and ( x.length is 2 )\n  unary_or_binary:        ( x ) -> x? and ( ( x.length is 1 ) or ( x.length is 2 ) )\n  $freeze:                ( x ) -> isa.boolean x\n\n\n#===========================================================================================================\n{ isa_optional\n  validate\n  validate_optional } = do =>\n  isa_optional      = {}\n  validate          = {}\n  validate_optional = {}\n  #.........................................................................................................\n  for type, test of isa\n    do ( type, test ) =>\n      isa_optional[       type ] = ( x ) => if x? then ( test x )             else true\n      validate_optional[  type ] = ( x ) => if x? then ( validate[ type ] x ) else x\n      validate[           type ] = ( x ) =>\n        return x if test.call isa, x\n        ### TAINT `typeof` will give some strange results ###\n        throw new Error \"expected a #{type}, got a #{typeof x}\"\n  #.........................................................................................................\n  return { isa_optional, validate, validate_optional, }\n\n\n#===========================================================================================================\nclass SYMBOLIC\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: -> throw new Error \"class cannot be instantiated\"\n\n  #---------------------------------------------------------------------------------------------------------\n  @_text_from_key:              ( $key ) -> if isa.symbol $key then $key.description else $key\n  @_listener_name_from_key:     ( $key ) -> 'on_' + @_text_from_key $key\n  @_unique_key_symbol_from_key: ( $key ) -> Symbol @_text_from_key $key\n\n\n#===========================================================================================================\nclass Datom\n  ### all API methods should start with `$` like `$key` and `$value` ###\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( $key, $value = null ) ->\n    throw new Error \"expected 1 or 2 arguments, got #{arguments.length}\" unless isa.unary_or_binary arguments\n    #.......................................................................................................\n    if arguments.length is 1\n      if isa.object $key\n        $value = $key\n        $key   = $value.$key ? null\n    #.......................................................................................................\n    @$key = $key\n    if isa.object $value\n      values = { $value..., }\n      delete values.$key ### special case: ensure we don't overwrite 'explicit' `$key` ###\n      Object.assign @, values\n    else\n      @$value = $value if $value?\n    #.......................................................................................................\n    $freeze = ( validate_optional.$freeze @$freeze ) ? true\n    delete @$freeze\n    Object.freeze @ if $freeze\n    #.......................................................................................................\n    validate.event_key @$key\n    return undefined\n\n\n#===========================================================================================================\nclass AE_Event extends Datom\n\n#===========================================================================================================\nclass AE_Event_results extends Datom\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( event, results ) ->\n    throw new Error \"expected 2 arguments, got #{arguments.length}\" unless isa.binary arguments\n    super 'event-results', { event, results, }\n    return undefined\n\n\n#===========================================================================================================\nclass Async_events\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @key_symbols  = new Map\n    @listeners    = new WeakMap()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  on: ( $key, receiver ) ->\n    ### TAINT prevent from registering a listener more than once per event $key ###\n    throw new Error \"expected 2 arguments, got #{arguments.length}\" unless isa.binary arguments\n    validate.event_key $key\n    validate.something receiver\n    #.......................................................................................................\n    ### if receiver is a callable, use it; else, try to retrieve a suitably named method and use that: ###\n    if isa.event_listener receiver\n      listener      = receiver\n    else\n      listener_name = SYMBOLIC._listener_name_from_key $key\n      listener0     = validate.event_listener receiver[ listener_name ]\n      listener      = ( P... ) -> await listener0.call receiver, P...\n    #.......................................................................................................\n    ( @_listeners_from_key $key ).push listener\n    unsubscribe = ->\n    return unsubscribe\n\n  #---------------------------------------------------------------------------------------------------------\n  _listeners_from_key: ( $key ) ->\n    ### TAINT is this necessary and does it what it intends to do? ###\n    ### use Symbol, WeakMap to allow for garbage collection when `Async_events` instance gets out of scope: ###\n    unless ( key_symbol = @key_symbols.get $key )?\n      @key_symbols.set $key, ( key_symbol = SYMBOLIC._unique_key_symbol_from_key $key )\n    unless ( R = @listeners.get key_symbol )?\n      @listeners.set key_symbol, ( R = [] )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _listeners_from_event: ( event ) ->\n    listeners   = @_listeners_from_key event.$key\n    return listeners ? []\n\n  #---------------------------------------------------------------------------------------------------------\n  emit: ( P... ) ->\n    event     = new AE_Event P...\n    { $key }  = event\n    listeners = @_listeners_from_event event\n    await resolved_promise ### as per https://github.com/sindresorhus/emittery/blob/main/index.js#L363 ###\n    results = await Promise.all ( ( -> await listener event )() for listener from listeners )\n    return new AE_Event_results event, results\n\n\n#===========================================================================================================\nAE = new Async_events()\n\n\nmodule.exports = { AE, Async_events, AE_Event, AE_Event_results, Datom, isa, validate, isa_optional, validate_optional }\n"
  ]
}